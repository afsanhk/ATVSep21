DROP TABLE IF EXISTS user_tasks CASCADE;
DROP TABLE IF EXISTS project_members CASCADE;
DROP TABLE IF EXISTS tasks CASCADE;
DROP TABLE IF EXISTS priorities CASCADE;
DROP TABLE IF EXISTS kanban_status CASCADE;
DROP TABLE IF EXISTS projects CASCADE;
DROP TABLE IF EXISTS users CASCADE;

CREATE TABLE users (
  id SERIAL PRIMARY KEY NOT NULL,
  user_name VARCHAR(255) NOT NULL,
  email VARCHAR(255) NOT NULL,
  last_login TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE projects (
  id SERIAL PRIMARY KEY NOT NULL,
  proj_name VARCHAR(255) NOT NULL,
  manager_id INTEGER NOT NULL,
  planned_start TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  planned_end TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  proj_description VARCHAR(255) NOT NULL
);

CREATE TABLE kanban_status (
  id SERIAL PRIMARY KEY NOT NULL,
  status VARCHAR(255) NOT NULL
);

CREATE TABLE priorities (
  id SERIAL PRIMARY KEY NOT NULL,
  priority_name VARCHAR(255) NOT NULL
);

CREATE TABLE tasks (
  id SERIAL PRIMARY KEY NOT NULL,
  title VARCHAR(255) NOT NULL,
  task_description VARCHAR(255) NOT NULL,
  priority_id INTEGER REFERENCES priorities(id) ON DELETE CASCADE,
  status_id INTEGER REFERENCES kanban_status(id) ON DELETE CASCADE,
  project_id INTEGER REFERENCES projects(id) ON DELETE CASCADE,
  plan_start TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  plan_end TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  kanban_order INTEGER
);

CREATE TABLE project_members (
  id SERIAL PRIMARY KEY NOT NULL,
  user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
  project_id INTEGER REFERENCES projects(id) ON DELETE CASCADE
);

CREATE TABLE user_tasks (
  id SERIAL PRIMARY KEY NOT NULL,
  user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
  task_id INTEGER REFERENCES tasks(id) ON DELETE CASCADE
);